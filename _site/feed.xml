<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-03-16T23:53:29+09:00</updated><id>http://localhost:4000/</id><title type="html">Seize the Day!</title><subtitle>오늘도 열심히!
</subtitle><entry><title type="html">Swift - 프로퍼티의 종류</title><link href="http://localhost:4000/jekyll/update/2017/03/16/swift3-propery.html" rel="alternate" type="text/html" title="Swift - 프로퍼티의 종류" /><published>2017-03-16T23:53:00+09:00</published><updated>2017-03-16T23:53:00+09:00</updated><id>http://localhost:4000/jekyll/update/2017/03/16/swift3-propery</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/03/16/swift3-propery.html">&lt;h3 id=&quot;프로퍼티&quot;&gt;프로퍼티&lt;/h3&gt;
&lt;p&gt;프로퍼티는 클래스, 구조체 또는 열거형 등에 관련된 값을 뜻합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;저장 프로퍼티(Stored Properties)
    &lt;ul&gt;
      &lt;li&gt;인스턴스 변수 또는 상수를 의미합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;연산 프로퍼티(Computed Properties)
    &lt;ul&gt;
      &lt;li&gt;값을 저장한 것이 아니라 특정 연산을 수행한 결과값을 의미합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;타입 프로퍼티(Type Properties)
    &lt;ul&gt;
      &lt;li&gt;특정 타입에 사용되는 것&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;저장-프로퍼티&quot;&gt;저장 프로퍼티&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct CoordinatePoint {
  var x: Int  //저장 프로퍼티
  var y: Int  //저장 프로퍼티
}

// 구조체는 기본적으로 저장 프로퍼티를 매개변수로 가지는 이니셜라이저가 있습니다.
// 저장 프로퍼티가 옵셔널이 아니더라도, 구조체는 저장 프로퍼티를 모두 포함하는 이니셜라이저를 자동으로 생성합니다.
let namsangPoint: CoordinatePoint = CoordinatePoint(x: 10, y: 5)

class Position {
  var point: CoordinatePoint // 저장 프로퍼티(변수) - 위치(Point)는 변경될 수 있음을 뜻합니다.
  let name: String // 저장 프로퍼티(상수)

  // 클래스의 저장 프로퍼티는 옵셔널이 아니라면 프로퍼티 기본값을 지정해주거나 사용자 정의 이니셜라이저를 통해 반드시 초기화해주어야 합니다.
  init(name: String, currentPoint: CoordinatePoint) {
    self.name = name
    self.point = currentPoint
  }
}

// 사용자정의 이니셜라이저를 호출해야만 합니다.
// 그렇지 않으면 프로퍼티 초기값을 할당할 수 없기 때문에 인스턴스 생성이 불가능합니다.
let namsangPosition: Position = Position(name: &quot;namsang&quot;, currentPoint: namsangPoint)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;클래스의 저장 프로퍼티에 초깃값을 지정해주면 따로 사용자 정의 이니셜라이저를 구현해줄 필요가 없습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct CoordinatePoint {
  var x: Int = 0 // 저장 프로퍼티
  var y: Int = 0 // 저장 프로퍼티
}

// 프로퍼티의 초깃값을 할당했다면 굳이 전달인자로 초깃값을 넘길 필요가 없습니다.
let namsangPoint: CoordinatePoint = CoordinatePoint()

class Position {
  var point: CoordinatePoint = CoordinatePoint() // 저장 프로퍼티
  var name: String = &quot;Unknown&quot; // 저장 프로퍼티
}

// 초깃값을 지정해줬다면 사용자정의 이니셜라이저를 사용하지 않아도 됩니다.
let namsangPosition: Position = Position()

// 인스턴스를 생성한 후에 값을 할당해줄 수 있습니다.
namsangPosition.point = namsangPoint
namsangPosition.name = &quot;namsang&quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;옵셔널-저장-프로퍼티&quot;&gt;옵셔널 저장 프로퍼티&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct CoordinatePoint {
  // 위치는 x, y 값을 모두 가져야하므로 옵셔널이면 안됩니다.
  var x: Int
  var y: Int
}

class Position {
  // 현재 사람의 위치를 모를 수도 있습니다. - 옵셔널
  var position: CoordinatePoint?
  let name: String

  init(name: String) {
    self.name = name
  }
}

// 이름은 필수지만 위치는 모를 수 있습니다.
let namsangPosition: Position = Position(name: &quot;namsang&quot;)

// 위치를 알게되면 그 때 위치 값을 할당해줍니다.
namsangPosition.point = CoordinatePoint(x: 20, y: 10)


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;지연-저장-프로퍼티&quot;&gt;지연 저장 프로퍼티&lt;/h3&gt;

&lt;p&gt;인스턴스가 생성될 때 프로퍼티에 값이 필요 없을 경우에 옵셔널 저장 프로퍼티로 정의합니다. 그러나 호출이 있어야 값을 초기화하는 지연 저장 프로퍼티(Lazy Stored Properties)가 있습니다. 지연 저장 프로퍼티는 var 키워드로 정의된 변수에 lazy 키워드를 사용하여 정의합니다.&lt;/p&gt;

&lt;p&gt;지연 저장 프로퍼티는 &lt;code class=&quot;highlighter-rouge&quot;&gt;주로 복잡한 크래스나 구조체를 구현할 때&lt;/code&gt; 많이 사용되며 불필요한 성능저하나 공간 낭비를 줄일 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct CoordinatePoint {
  var x: Int = 0
  var y: Int = 0
}

class Position {
  lazy var point: CoordinatePoint = CoordinatePoint()
  let name: String

  init(name: String) {
    self.name = name
  }
}

let namsangPosition: Position = Position(name: &quot;namsang&quot;)

// Position 클래스의 point 지연 저장 프로퍼티를 호출(접근)했을 때 프로퍼티의 CoordinatePoint가 생성됩니다.
print(namsangPosition.point)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;연산-프로퍼티&quot;&gt;연산 프로퍼티&lt;/h3&gt;
&lt;p&gt;연산 프로퍼티는 특정 상태에 따른 값을 연산하는 프로퍼티입니다. 접근자, 설정자의 역할을 수행할 수 있으며 클래스, 구조체, 열거형에 정의할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;메서드로 접근자, 설정자를 구현헀을 때보다 연산 프로퍼티로 구현했을 때 훨씬 더 간편하고 직관적입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;메서드로-구현된-접근자와-설정자&quot;&gt;메서드로 구현된 접근자와 설정자&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; struct CoordinatePoint {
   var x: Int // 저장 프로퍼티
   var y: Int // 저장 프로퍼티

   // 대칭점을 구하는 메서드 - 접근자
   func oppositePoint() -&amp;gt; CoordinatePoint {
     return CoordinatePoint(x: -x, y: -y)
   }

   // 대칭점을 설정하는 메서드 - 설정자
   mutating func setOppositePoint(_ opposite: CoordinatePoint) {
     x = -opposite.x
     y = -opposite.y
   }
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;연산-프로퍼티의-정의&quot;&gt;연산 프로퍼티의 정의&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; struct CoordinatePoint {
   var x: Int // 저장 프로퍼티
   var y: Int // 저장 프로퍼티

   // 연산 프로퍼티
   var oppositePoint: CoordinatePoint {
     // 접근자
     get {
       return CoordinatePoint(x: -x, y: -y)
     }

     // 설정자
     set(opposite) {
       x = -opposite.x
       y = -opposite.y
     }
   }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;프로퍼티-감시자&quot;&gt;프로퍼티 감시자&lt;/h3&gt;

&lt;p&gt;프로퍼티 감시자(Property Observers)를 사용하면 프로퍼티의 값이 변경됨에 따라 적절한 액션을 취할 수 있습니다. 프로퍼티 감시자는 프로퍼티의 값이 새로 할당될 때마다 호출되는데 변경되는 값이 현재의 값과 같더라도 호출됩니다.&lt;/p&gt;

&lt;p&gt;프로퍼티 감시자는 일반 저장 프로퍼티에만 적용할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;willSet : 프로퍼티의 값이 변경되기 직전에 호출&lt;/li&gt;
  &lt;li&gt;didSet : 프로퍼티의 값이 변경된 직후에 호출&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;willSet 메서드에 전달되는 전달인자는 변경될 값(newValue), didSet 메서드에 전달되는 전달인자는 변경되기 전의 값(oldValue)이 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;타입-프로퍼티&quot;&gt;타입 프로퍼티&lt;/h3&gt;
&lt;p&gt;각각의 인스턴스가 아닌 타입 자체에 속하게 되는 프로퍼티를 &lt;b&gt;타입 프로퍼티&lt;/b&gt;라고 합니다. 타입 프로퍼티는 타입 자체에 영향을 미치는 프로퍼티이며 인스턴스의 생성 여부와 상관 없이 타입 프로퍼티의 값은 하나입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해당 타입의 모든 인스턴스가 공통으로 사용하는 값&lt;/li&gt;
  &lt;li&gt;모든 인스턴스에서 공용으로 접근하고 값을 변경할 수 있는 변수&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;타입-프로퍼티와-인스턴스-프로퍼티&quot;&gt;타입 프로퍼티와 인스턴스 프로퍼티&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class TypeClass {

  // 저장 타입 프로퍼티
  static var typeProperty: Int = 0

  // 저장 인스턴스 프로퍼티
  var instanceProperty: Int = 0 {
    didSet {
      Type.typeProperty = instanceProperty + 100
    }
  }

  // 연산 타입 프로퍼티
  static var typeComputedProperty: Int {
    get {
      return typeProperty
    }
    set {
      typeProperty = newValue
    }
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;글의 일부 내용은 야곰님의 저서 &lt;a href=&quot;http://book.naver.com/bookdb/book_detail.nhn?bid=11445773&quot;&gt;스위프트 프로그래밍&lt;/a&gt;(2017, 한빛미디어)를 참고하여 작성되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">프로퍼티 프로퍼티는 클래스, 구조체 또는 열거형 등에 관련된 값을 뜻합니다.</summary></entry><entry><title type="html">Swift - 구조체, 클래스</title><link href="http://localhost:4000/jekyll/update/2017/03/11/swift3-struct-class.html" rel="alternate" type="text/html" title="Swift - 구조체, 클래스" /><published>2017-03-11T13:40:05+09:00</published><updated>2017-03-11T13:40:05+09:00</updated><id>http://localhost:4000/jekyll/update/2017/03/11/swift3-struct-class</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/03/11/swift3-struct-class.html">&lt;h3 id=&quot;구조체-클래스&quot;&gt;구조체, 클래스?&lt;/h3&gt;
&lt;p&gt;구조체와 클래스는 프로그래머가 데이터를 용도에 맞게 묶어 표현하고자 할 때 용이합니다. 구조체와 클래스는 프로퍼티와 메서드를 사용하여 데이터를 구조화하여 관리할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;같은점&quot;&gt;같은점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;값을 저장하기 위해 프로퍼티(저장 프로퍼티)를 정의할 수 있습니다. 연산 프로퍼티도 정의 가능합니다.&lt;/li&gt;
  &lt;li&gt;기능 수행을 위해 메서드를 정의할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;서브스크립트 문법을 통해 구조체 또는 클래스가 가지는 값(프로퍼티)에 접근하도록 서브스크립트를 정의할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;초기화될 때의 상태를 지정하기 위해 이니셜라이저를 정의할 수 있습니다.
    &lt;ul&gt;
      &lt;li&gt;구조체는 기본으로 멤버와이즈 이니셜라이저가 제공됩니다. 또, 사용자 정의 이니셜라이저도 구현이 가능합니다.&lt;/li&gt;
      &lt;li&gt;클래스도 기본 이니셜라이저 외에 사용자가 직접 이니셜라이저를 정의할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;초기 구현과 더불어 새로운 기능 추가를 위해 익스텐션을 통해 확장할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;특정 기능을 수행하기 위해 특정 프로토콜을 준수(Adopt)할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;소스파일 하나에 여러 개의 구조체와 여러 개의 클래스를 정의하고 구현 가능합니다.&lt;/li&gt;
  &lt;li&gt;중첩 함수와 마찬가지로 구조체 안에 구조체, 클래스 안에 클래스 등과 같이 중첩 타입의 정의 및 선언 가능합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;차이점&quot;&gt;차이점&lt;/h3&gt;
&lt;p&gt;데이터를 구조화하여 관리하는 구조체와 클래스는 서로 같은 점도 있지만, 서로 차이점도 있습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;구조체&lt;/th&gt;
      &lt;th&gt;클래스&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;전통적인 OOP 관점에서의 클래스&lt;/td&gt;
      &lt;td&gt;C언어 등의 구조체보다 다양한 기능&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;b&gt;참조 타입&lt;/b&gt;&lt;/td&gt;
      &lt;td&gt;&lt;b&gt;값 타입&lt;/b&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;단일 상속&lt;/td&gt;
      &lt;td&gt;상속 불가&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;타입캐스팅 가능&lt;/td&gt;
      &lt;td&gt;타입캐스팅 불가&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;디이니셜라이저 가능&lt;/td&gt;
      &lt;td&gt;디이니셜라이져 불가&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iOS 프레임워크의 대부분의 큰 뼈대는 모두 클래스로 구성&lt;/td&gt;
      &lt;td&gt;Swift의 대부분의 큰 뼈대는 모두 구조체로 구성&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;가장 큰 차이는 인스턴스의 타입입니다. 클래스의 인스턴스는 참조 타입이며 구조체의 인스턴스는 값 타입입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;값 타입과 참조 타입의 가장 큰 차이는 '무엇이 전달되느냐'입니다.&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;어떤 함수의 전달인자로 값 타입의 값을 넘기면 &lt;b&gt;전달될 값이 복사&lt;/b&gt;되어 전달됩니다.&lt;/li&gt;
  &lt;li&gt;어떤 함수의 전달인자로 참조 타입의 값을 넘기면 &lt;b&gt;참조(주소)가 전달&lt;/b&gt;됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;인스턴스와 객체
흔히 다른 프로그래밍 언어에서는 클래스의 인스턴스를 객체라고 부릅니다. 물론 스위프트에서도 객체라고 표현하는 것이 틀린 것은 아니지만, 스위프트 공식 문서에는 좀 더 한정적인 인스턴스라는 용어를 사용합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;구조체와-클래스-선택해서-사용하기&quot;&gt;구조체와 클래스 선택해서 사용하기&lt;/h3&gt;

&lt;p&gt;구조체와 클래스는 모두 새로운 데이터 타입을 정의하고 기능을 추가한다는 점에서는 같습니다. 하지만 구조체 인스턴스는 항상 값 타입이고, 클래스 인스턴스는 참조 타입입니다. 그 의미는 생긴 것은 비슷하지만 용도는 다르다는 의미입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;프로젝트의 성격에 따라, 데이터의 활용 용도에 따라, 특정 타입을 구현할 때 구조체와 클래스 둘 중 하나를 선택&lt;/code&gt;해서 사용해야 합니다.&lt;/p&gt;

&lt;p&gt;애플 가이드라인에 따른 구조체 사용 조건&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;연관된 간단한 값의 집합을 캡슐화하는 것만이 목적일 때&lt;/li&gt;
  &lt;li&gt;캡슐화된 값이 참조되는 것보다 복사되는 것이 합당할 때&lt;/li&gt;
  &lt;li&gt;구조체에 저장된 프로퍼티가 값 타입이며 참조되는 것보다 복사되는 것이 합당할 때&lt;/li&gt;
  &lt;li&gt;다른 타입으로부터 상속받거나 자신이 상속될 필요가 없을 때&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;글의 일부 내용은 야곰님의 저서 &lt;a href=&quot;http://book.naver.com/bookdb/book_detail.nhn?bid=11445773&quot;&gt;스위프트 프로그래밍&lt;/a&gt;(2017, 한빛미디어)를 참고하여 작성되었습니다.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">구조체, 클래스? 구조체와 클래스는 프로그래머가 데이터를 용도에 맞게 묶어 표현하고자 할 때 용이합니다. 구조체와 클래스는 프로퍼티와 메서드를 사용하여 데이터를 구조화하여 관리할 수 있습니다.</summary></entry><entry><title type="html">Introducing Lanyon</title><link href="http://localhost:4000/2014/01/02/introducing-lanyon.html" rel="alternate" type="text/html" title="Introducing Lanyon" /><published>2014-01-02T00:00:00+09:00</published><updated>2014-01-02T00:00:00+09:00</updated><id>http://localhost:4000/2014/01/02/introducing-lanyon</id><content type="html" xml:base="http://localhost:4000/2014/01/02/introducing-lanyon.html">&lt;p&gt;Lanyon is an unassuming &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; theme that places content first by tucking away navigation in a hidden drawer. It’s based on &lt;a href=&quot;http://getpoole.com&quot;&gt;Poole&lt;/a&gt;, the Jekyll butler.&lt;/p&gt;

&lt;h3 id=&quot;built-on-poole&quot;&gt;Built on Poole&lt;/h3&gt;

&lt;p&gt;Poole is the Jekyll Butler, serving as an upstanding and effective foundation for Jekyll themes by &lt;a href=&quot;https://twitter.com/mdo&quot;&gt;@mdo&lt;/a&gt;. Poole, and every theme built on it (like Lanyon here) includes the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complete Jekyll setup included (layouts, config, &lt;a href=&quot;/404&quot;&gt;404&lt;/a&gt;, &lt;a href=&quot;/atom.xml&quot;&gt;RSS feed&lt;/a&gt;, posts, and &lt;a href=&quot;/about&quot;&gt;example page&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Mobile friendly design and development&lt;/li&gt;
  &lt;li&gt;Easily scalable text and component sizing with &lt;code class=&quot;highlighter-rouge&quot;&gt;rem&lt;/code&gt; units in the CSS&lt;/li&gt;
  &lt;li&gt;Support for a wide gamut of HTML elements&lt;/li&gt;
  &lt;li&gt;Related posts (time-based, because Jekyll) below each post&lt;/li&gt;
  &lt;li&gt;Syntax highlighting, courtesy Pygments (the Python-based code snippet highlighter)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lanyon-features&quot;&gt;Lanyon features&lt;/h3&gt;

&lt;p&gt;In addition to the features of Poole, Lanyon adds the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Toggleable sliding sidebar (built with only CSS) via &lt;strong&gt;☰&lt;/strong&gt; link in top corner&lt;/li&gt;
  &lt;li&gt;Sidebar includes support for textual modules and a dynamically generated navigation with active link support&lt;/li&gt;
  &lt;li&gt;Two orientations for content and sidebar, default (left sidebar) and &lt;a href=&quot;https://github.com/poole/lanyon#reverse-layout&quot;&gt;reverse&lt;/a&gt; (right sidebar), available via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/poole/lanyon#themes&quot;&gt;Eight optional color schemes&lt;/a&gt;, available via &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/poole/lanyon#readme&quot;&gt;Head to the readme&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h3 id=&quot;browser-support&quot;&gt;Browser support&lt;/h3&gt;

&lt;p&gt;Lanyon is by preference a forward-thinking project. In addition to the latest versions of Chrome, Safari (mobile and desktop), and Firefox, it is only compatible with Internet Explorer 9 and above.&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;Lanyon is developed on and hosted with GitHub. Head to the &lt;a href=&quot;https://github.com/poole/lanyon&quot;&gt;GitHub repository&lt;/a&gt; for downloads, bug reports, and features requests.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</content><author><name></name></author><summary type="html">Lanyon is an unassuming Jekyll theme that places content first by tucking away navigation in a hidden drawer. It’s based on Poole, the Jekyll butler. Built on Poole Poole is the Jekyll Butler, serving as an upstanding and effective foundation for Jekyll themes by @mdo. Poole, and every theme built on it (like Lanyon here) includes the following: Complete Jekyll setup included (layouts, config, 404, RSS feed, posts, and example page) Mobile friendly design and development Easily scalable text and component sizing with rem units in the CSS Support for a wide gamut of HTML elements Related posts (time-based, because Jekyll) below each post Syntax highlighting, courtesy Pygments (the Python-based code snippet highlighter) Lanyon features In addition to the features of Poole, Lanyon adds the following: Toggleable sliding sidebar (built with only CSS) via ☰ link in top corner Sidebar includes support for textual modules and a dynamically generated navigation with active link support Two orientations for content and sidebar, default (left sidebar) and reverse (right sidebar), available via &amp;lt;body&amp;gt; classes Eight optional color schemes, available via &amp;lt;body&amp;gt; classes Head to the readme to learn more. Browser support Lanyon is by preference a forward-thinking project. In addition to the latest versions of Chrome, Safari (mobile and desktop), and Firefox, it is only compatible with Internet Explorer 9 and above. Download Lanyon is developed on and hosted with GitHub. Head to the GitHub repository for downloads, bug reports, and features requests. Thanks!</summary></entry><entry><title type="html">Example content</title><link href="http://localhost:4000/2014/01/01/example-content.html" rel="alternate" type="text/html" title="Example content" /><published>2014-01-01T00:00:00+09:00</published><updated>2014-01-01T00:00:00+09:00</updated><id>http://localhost:4000/2014/01/01/example-content</id><content type="html" xml:base="http://localhost:4000/2014/01/01/example-content.html">&lt;div class=&quot;message&quot;&gt;
  Howdy! This is an example blog post that shows several types of HTML content supported in this theme.
&lt;/div&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis &lt;a href=&quot;#&quot;&gt;dis parturient montes&lt;/a&gt;, nascetur ridiculus mus. &lt;em&gt;Aenean eu leo quam.&lt;/em&gt; Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Etiam porta &lt;strong&gt;sem malesuada magna&lt;/strong&gt; mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur.&lt;/p&gt;

&lt;h2 id=&quot;inline-html-elements&quot;&gt;Inline HTML elements&lt;/h2&gt;

&lt;p&gt;HTML defines a long list of available inline tags, a complete list of which can be found on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;Mozilla Developer Network&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;To bold text&lt;/strong&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;To italicize text&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Abbreviations, like &lt;abbr title=&quot;HyperText Markup Langage&quot;&gt;HTML&lt;/abbr&gt; should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;, with an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; attribute for the full phrase.&lt;/li&gt;
  &lt;li&gt;Citations, like &lt;cite&gt;— Mark otto&lt;/cite&gt;, should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;Deleted&lt;/del&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;del&amp;gt;&lt;/code&gt; and &lt;ins&gt;inserted&lt;/ins&gt; text should use &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Superscript &lt;sup&gt;text&lt;/sup&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sup&amp;gt;&lt;/code&gt; and subscript &lt;sub&gt;text&lt;/sub&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of these elements are styled by browsers with few modifications on our part.&lt;/p&gt;

&lt;h2 id=&quot;heading&quot;&gt;Heading&lt;/h2&gt;

&lt;p&gt;Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis &lt;code class=&quot;highlighter-rouge&quot;&gt;code element&lt;/code&gt; montes, nascetur ridiculus mus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Example can be run directly in your JavaScript console
&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Create a function that takes two arguments and returns the sum of those arguments
&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;return a + b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call the function
&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;adder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &amp;gt; 8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa.&lt;/p&gt;

&lt;h3 id=&quot;lists&quot;&gt;Lists&lt;/h3&gt;

&lt;p&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Praesent commodo cursus magna, vel scelerisque nisl consectetur et.&lt;/li&gt;
  &lt;li&gt;Donec id elit non mi porta gravida at eget metus.&lt;/li&gt;
  &lt;li&gt;Nulla vitae elit libero, a pharetra augue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Vestibulum id ligula porta felis euismod semper.&lt;/li&gt;
  &lt;li&gt;Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.&lt;/li&gt;
  &lt;li&gt;Maecenas sed diam eget risus varius blandit sit amet non magna.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;HyperText Markup Language (HTML)&lt;/dt&gt;
  &lt;dd&gt;The language used to describe and define the content of a Web page&lt;/dd&gt;

  &lt;dt&gt;Cascading Style Sheets (CSS)&lt;/dt&gt;
  &lt;dd&gt;Used to describe the appearance of Web content&lt;/dd&gt;

  &lt;dt&gt;JavaScript (JS)&lt;/dt&gt;
  &lt;dd&gt;The programming language used to build advanced Web sites and applications&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;h3 id=&quot;tables&quot;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Upvotes&lt;/th&gt;
      &lt;th&gt;Downvotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Totals&lt;/td&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;23&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Alice&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bob&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/poole/poole/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Howdy! This is an example blog post that shows several types of HTML content supported in this theme. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Sed posuere consectetur est at lobortis. Cras mattis consectetur purus sit amet fermentum. Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit. Etiam porta sem malesuada magna mollis euismod. Cras mattis consectetur purus sit amet fermentum. Aenean lacinia bibendum nulla sed consectetur. Inline HTML elements HTML defines a long list of available inline tags, a complete list of which can be found on the Mozilla Developer Network. To bold text, use &amp;lt;strong&amp;gt;. To italicize text, use &amp;lt;em&amp;gt;. Abbreviations, like HTML should use &amp;lt;abbr&amp;gt;, with an optional title attribute for the full phrase. Citations, like — Mark otto, should use &amp;lt;cite&amp;gt;. Deleted text should use &amp;lt;del&amp;gt; and inserted text should use &amp;lt;ins&amp;gt;. Superscript text uses &amp;lt;sup&amp;gt; and subscript text uses &amp;lt;sub&amp;gt;. Most of these elements are styled by browsers with few modifications on our part. Heading Vivamus sagittis lacus vel augue rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Code Cum sociis natoque penatibus et magnis dis code element montes, nascetur ridiculus mus. // Example can be run directly in your JavaScript console // Create a function that takes two arguments and returns the sum of those arguments var adder = new Function(&quot;a&quot;, &quot;b&quot;, &quot;return a + b&quot;); // Call the function adder(2, 6); // &amp;gt; 8 Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa. Lists Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aenean lacinia bibendum nulla sed consectetur. Etiam porta sem malesuada magna mollis euismod. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec id elit non mi porta gravida at eget metus. Nulla vitae elit libero, a pharetra augue. Donec ullamcorper nulla non metus auctor fringilla. Nulla vitae elit libero, a pharetra augue. Vestibulum id ligula porta felis euismod semper. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Maecenas sed diam eget risus varius blandit sit amet non magna. Cras mattis consectetur purus sit amet fermentum. Sed posuere consectetur est at lobortis. HyperText Markup Language (HTML) The language used to describe and define the content of a Web page Cascading Style Sheets (CSS) Used to describe the appearance of Web content JavaScript (JS) The programming language used to build advanced Web sites and applications Integer posuere erat a ante venenatis dapibus posuere velit aliquet. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Nullam quis risus eget urna mollis ornare vel eu leo. Tables Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Name Upvotes Downvotes Totals 21 23 Alice 10 11 Bob 4 3 Charlie 7 9 Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo. Want to see something else added? Open an issue.</summary></entry><entry><title type="html">What’s Jekyll?</title><link href="http://localhost:4000/2013/12/31/whats-jekyll.html" rel="alternate" type="text/html" title="What's Jekyll?" /><published>2013-12-31T00:00:00+09:00</published><updated>2013-12-31T00:00:00+09:00</updated><id>http://localhost:4000/2013/12/31/whats-jekyll</id><content type="html" xml:base="http://localhost:4000/2013/12/31/whats-jekyll.html">&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; is a static site generator, an open-source tool for creating simple yet powerful websites of all shapes and sizes. From &lt;a href=&quot;https://github.com/mojombo/jekyll/blob/master/README.markdown&quot;&gt;the project’s readme&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll is a simple, blog aware, static site generator. It takes a template directory […] and spits out a complete, static website suitable for serving with Apache or your favorite web server. This is also the engine behind GitHub Pages, which you can use to host your project’s page or blog right here from GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s an immensely useful tool and one we encourage you to use here with Lanyon.&lt;/p&gt;

&lt;p&gt;Find out more by &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Jekyll is a static site generator, an open-source tool for creating simple yet powerful websites of all shapes and sizes. From the project’s readme: Jekyll is a simple, blog aware, static site generator. It takes a template directory […] and spits out a complete, static website suitable for serving with Apache or your favorite web server. This is also the engine behind GitHub Pages, which you can use to host your project’s page or blog right here from GitHub. It’s an immensely useful tool and one we encourage you to use here with Lanyon. Find out more by visiting the project on GitHub.</summary></entry></feed>